策略模式就是：我们设计一些写好的算法（函数），将他们封装起来，让他们可以自由的替换，这样就可以轻松地切换不同的算法来解决同一个问题

策略模式的组成：
Strategy（策略）：
    Strategy定义所有支持的算法的公共接口
ConcreteStrategy（具体的策略）：
    ConcreteStrategy负责实现Strategy角色的接口，即负责实现具体的策略（战略、方向、方法和算法）。
Context（上下文）：
    负责根据环境使用Strategy。Context保存了ConcreteStrategy的实例，并使用ConcreteStrategy去实现需求（总之，还是要调用Strategy角色的接口）。

改造场景1：
会员优惠场景，需求如下：
不同级别的会员接待时的话术不同，结账时的折扣不同，赠品的款式也不一样
example_before是改造前写法
example_after是改造后写法

优点：
    1、扩展性好，在定义好策略后后面扩展只需要添加新的策略实现即可使用
    2、可以避免多重选择语句，代码简洁，可读性好
    3、可以封装不同的环境类实现不同的组合

缺点：
    1、使用侧必须知道所有的策略类及其作用
    2、任何细小的变化都需要新增策略类，会产生很多的策略类，难以维护